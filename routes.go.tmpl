// generated by {{ .Prgm }}; DO NOT EDIT

package {{ .PkgName }}

import (
    "net/url"
)

// RouteRegisterer is the interface implemented by objects that can register a name for a route path.
type RouteRegisterer interface {
    RegisterRoute(path string, name string)
}

// RouteReverser is the interface implemented by objects that can retrieve the url of a route based on
// its registered name and the route param names and values.
type RouteReverser interface {
    ReverseRoute(name string, params ...string) *url.URL 
}

// RouteLocation is the interface implemented by objects that can return an url for a route, using
// a RouteReverser.
type RouteLocation interface {
	Location(RouteReverser) *url.URL
}

// registerRoutes uses rr to register the routes by path and name.
func registerRoutes(rr RouteRegisterer) {
{{ range .Routes.ByResource }}rr.RegisterRoute("{{ .Path }}", route{{ symbolName .Name }})
{{end}}}

// Constants defining the name of all the routes of the API.
const (
{{ range .Routes.ByResource }}route{{ symbolName .Name }} = "{{ .Name }}"
{{end}}
)

// Types defining the parameters of all the routes of the API.
type (
{{ range .Routes.ByResource }}// Route{{ symbolName .Name }} represents the parameters of the path {{ .Path }}.
Route{{ symbolName .Name }} struct { {{ range .RouteParams }}
    {{ symbolName .Varname }} string {{ end }}}
{{end}}
)

{{ range .Routes.ByResource }}
// Location implements building an absolute URL for a Route{{ symbolName .Name }} using a RouteReverser.
func (r Route{{ symbolName .Name }}) Location(rr RouteReverser) *url.URL {
    return rr.ReverseRoute(route{{ symbolName .Name }}, {{ range .RouteParams }}"{{ .Name }}", r.{{ symbolName .Varname }},{{end}})
}
{{end}}
