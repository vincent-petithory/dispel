// AUTOMATICALLY GENERATED FILE. DO NOT EDIT.

package dispel

var methodHandler = gofmtTmpl(asset.init(asset{Name: "methodhandler.go", Content: "" +
	"// +build impl\n\npackage dispel\n\nimport (\n\t\"net/http\"\n\t\"strings\"\n)\n\n// MethodHandler is an http.Handler that dispatches to a handler whose field name matches\n// the name of the HTTP request's method, eg: GET\n//\n// If the request's method is OPTIONS and Options is not set, then the handler\n// responds with a status of 200 and sets the Allow header to a comma-separated list of\n// available methods.\n//\n// If the request's method has no handler for it, the MethodHandler responds with\n// a status of 405 Method not allowed and sets the Allow header to a comma-separated list\n// of available methods.\ntype MethodHandler struct {\n\tGet, Head, Post, Put, Patch, Delete, Options http.Handler\n}\n\n// ServeHTTP calls the appropriate http.Handler for r.Method, or responds with http.StatusMethodNotAllowed.\nfunc (h MethodHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tswitch r.Method {\n\tcase \"GET\":\n\t\tif h.Get != nil {\n\t\t\th.Get.ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\tcase \"HEAD\":\n\t\tif h.Head != nil {\n\t\t\th.Head.ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\t\tif h.Get != nil {\n\t\t\th.Get.ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\tcase \"POST\":\n\t\tif h.Post != nil {\n\t\t\th.Post.ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\tcase \"PUT\":\n\t\tif h.Put != nil {\n\t\t\th.Put.ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\tcase \"PATCH\":\n\t\tif h.Patch != nil {\n\t\t\th.Patch.ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\tcase \"DELETE\":\n\t\tif h.Delete != nil {\n\t\t\th.Delete.ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\tcase \"OPTIONS\":\n\t\tif h.Options != nil {\n\t\t\th.Options.ServeHTTP(w, r)\n\t\t\treturn\n\t\t}\n\t\th.setAllowHeader(w.Header())\n\t\tw.WriteHeader(http.StatusOK)\n\t\treturn\n\t}\n\thttp.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)\n}\n\nfunc (h MethodHandler) setAllowHeader(header http.Header) {\n\tallow := make([]string, 0, 6)\n\tif h.Delete != nil {\n\t\tallow = append(allow, \"DELETE\")\n\t}\n\tif h.Get != nil {\n\t\tallow = append(allow, \"GET\")\n\t}\n\tif h.Head != nil {\n\t\tallow = append(allow, \"HEAD\")\n\t}\n\tif h.Patch != nil {\n\t\tallow = append(allow, \"PATCH\")\n\t}\n\tif h.Post != nil {\n\t\tallow = append(allow, \"POST\")\n\t}\n\tif h.Put != nil {\n\t\tallow = append(allow, \"PUT\")\n\t}\n\theader.Set(\"Allow\", strings.Join(allow, \", \"))\n\n}\n" +
	""}))
