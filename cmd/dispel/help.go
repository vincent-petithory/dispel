package main

var helptext = "The dispel command generates source code based on a JSON Hyper-Schema for quickly building REST APIs in Go.\n\nIt requires a unique argument, SCHEMA, which is the path to the JSON Hyper-Schema.\n\nIt is best used in conjunction with go generate, by making use of $GOPACKAGE and $GOFILE envvars.\n\nFlags\n\nThe --version flag makes dispel to print the API version of its generated code, and exits. See the Version constant in the github.com/vincent-petithory/dispel package for its meaning.\n\nThe -v flag makes dispel more verbose about what the entities it discovers while parsing the json schema.\n\nThe -t flag specifies which templates to execute, with a comma-separated list of template names.\nThe names must be in the following list:\n\n    handlerfuncs\n    handlers\n    routes\n    types\n\n\nIf empty (the default), none is executed. If set to the special value all, all known templates are executed.\ndispel will write a file in the package dir (see -pp flag) for each name provided with a filename using the pattern {prefix}{name}.go, where prefix is defined by the -p flag.\n\nThe -d flag specifies which default implementations provided by dispel to execute,\nlike -t, using a comma-separated list of default implementation names.\nThe names must be in the following list:\n\n    defaults_codec\n    defaults_mux\n    methodhandler\n    methodhandler_test\n\n\nIf empty (the default), none is executed. If set to the special value all, all default implementations are executed.\ndispel will write a file in the package dir (see -pp flag) for each default implementation\nwith a filename using the pattern {impl-name}.go\n\nThe -p flag specifies which prefix to use for each generated template file. By default, it is set to 'dispel_'.\nThis doesn't apply to default implementations, which have fixed names.\n\nThe -hrt flag specifies the Go type in the target package which\nwill be the receiver for the handler functions dispel generates.\nFor example, with a value of *AppHandlers, dispel will generate something like:\n\n    func (ah *AppHandlers) getUsers(w http.ResponseWriter, r *http.Request, ....\n\n\nThe -pp flag specifies which package dir to generate and analyze code into.\nIt is mandatory to set this flag if dispel is not invoked with go:generate.\nIf set when dispel is invoked with go:generate, it overrides the package path resolved from $GOFILE.\n\nThe -pn flag specifies the package name of the code generated by dispel.\nIt is mandatory to set a value if not invoked with go:generate.\nIf set when dispel is invoked with go:generate, it overrides the value of $GOPACKAGE.\n\nThe -f flag specifies the path to the file for an alternate format for the template to use, using the Go template syntax.\nIf the value is -, then the template is read from STDIN.\nIf set, then -t and -d flags are ignored: only this template is executed. The result is printed to what the -o flag is set to, which by default is STDOUT.\n\nThe -o flag is only useful when -f is specified. It specifies a path where to write the output from -f.\nBy default, its value is -, which means it writes to STDOUT.\n\nThe context passed to the template is TemplateContext.\n\nTemplate Context\n\nThe following struct is passed to the templates:\n\n    type TemplateContext struct {\n        Prgm                string   // name of the program generating the source\n        PkgName             string   // package name for which source code is generated\n        Routes              Routes   // routes parsed by the SchemaParser\n        HandlerReceiverType string   // type which acts as the receiver of the handler funcs.\n        ExistingHandlers    []string // list of existing handler funcs in the target package, with HandlerReceiverType as the receiver\n        ExistingTypes       []string // list of existing types in the target package.\n    }\n\nThe template has those functions available:\n\n * tolower            : calls strings.ToLower\n * capitalize         : uppercase the first rune of a string\n * symbolName         : uppercase each rune following one of \".- \", then uppercase the first rune \n * hasItem            : takes 2 arguments: ([]string, string); returns true if string is one of the elements of []string\n * varname            : creates a short variable name from a type. e.g MyLongType would return mlt\n * printTypeDef       : prints a valid Go type from a JSONType\n * printTypeName      : prints the name of the Go type for a JSONType\n * printSmartDerefType: is like printTypeName, but if the argument is a JSONObject, it return *TheType instead of TheType.\n\nFor more information, see the documentation of the github.com/vincent-petithory/dispel package's TemplateContext type.\n"
